#include "globals.incl"

float3 DepthToPos(float depth, float2 uv)
{
	float4 worldPos = mul(float4(float2(uv.x, 1.f - uv.y) * 2.f - 1.f, depth, 1.0f), InvViewProj);
	return worldPos.xyz / worldPos.w;
}

float4 main(float2 uv : TEXCOORD0, float4 pos : SV_Position) : SV_Target0
{
	float depth = Depth.Sample(Point, uv).x;
	float3 wpos = DepthToPos(depth, uv);

	float3 dir = normalize(LightPos - wpos);
	if (acos(-dot(dir, LightDir)) > LightAngle)
	{
		discard;
	}

	float4 color = ColorSpec.Sample(Point, uv);
	float4 normRough = NormalRough.Sample(Point, uv);
	float3 normal = normRough.xyz;
	float roughness = normRough.w;

	float4 lightProjSpace = mul(float4(wpos, 1.f), LightViewProj);
	lightProjSpace.xyz /= lightProjSpace.w;

	lightProjSpace.xy = lightProjSpace.xy * 0.5f + 0.5f;
	lightProjSpace.y = 1.f - lightProjSpace.y;

	float shadowDepth = ShadowMap.Sample(BilinearBorder, lightProjSpace.xy).x;
	float shadowFactor = shadowDepth + 0.0001f > lightProjSpace.z ? 1.f : 0.f;

	float shading = saturate(dot(dir, normal));// * smoothstep(LightRange, 0.f, distance(LightPos, wpos));// + 0.03f;
	
	return float4(color.xyz * shading * LightColor * 50.f * shadowFactor, 1.f);
}