#ifndef GLOBALS__INCLUDED
#define GLOBALS__INCLUDED

#define LIGHT_SPOT 0
#define LIGHT_DIR 1
#define ESMc 120.f
#define INVFar (1.f / 4000.f)

cbuffer cbPerObject : register(b0)
{
	row_major matrix ObjTransform :		packoffset(c0);
	row_major float3x3 NormalTfm :		packoffset(c4);
	float specularFactor :				packoffset(c6.w);
	uint LightMapIndex :                packoffset(c7.x);
};

cbuffer cbPerLight : register (b2)
{
	row_major matrix LightViewProj :	packoffset(c0);
	row_major matrix LightWorld :		packoffset(c4);
	float3 LightColor :					packoffset(c8);
	float LightSpecular :				packoffset(c8.w);
	float3 LightPos :					packoffset(c9);
	float LightRange :					packoffset(c9.w);
	float3 LightDir :					packoffset(c10);
	float LightAngle :					packoffset(c10.w);
	int LightType	:					packoffset(c11);
	float TexelSize :					packoffset(c11.y);
	float2 InvLightMapRes :				packoffset(c11.z);
};

cbuffer cbPerFrame : register(b3)
{
	float4 CameraPos :					packoffset(c0);
	row_major matrix ViewProj :			packoffset(c1);
	row_major matrix InvViewProj :		packoffset(c5);
	float2 InvResolution :				packoffset(c9);
	float3 AmbientLight :				packoffset(c10);
	float3 LVStart :					packoffset(c11);
	float3 LVEnd :						packoffset(c12);
	//xyz - size, w - num cells
	float4 LVCellSize :					packoffset(c13);
	bool DisableDirect :				packoffset(c14.x);
	bool DisableAO :					packoffset(c14.y);
	bool DisableIndirect :				packoffset(c14.z);
	bool DisableAmbient :				packoffset(c14.w);
	bool DisableDecal :					packoffset(c15.x);
	bool UseESM :						packoffset(c15.y);
	uint NumObjects :					packoffset(c15.z);

	float3 OldLVStart	:				packoffset(c16);
}

//All shading
Texture2D LightAcc :					register(t4);

//Terrain rendering
Texture2DArray TerrainDecal :			register(t0);
Texture2DArray TerrainBump :			register(t1);
Texture2DArray TerrainSpec :			register(t2);
Texture2D HeightMap :					register(t7);
Texture2D TextureWeights0 :				register(t8);

//Deferred rendering
Texture2D ColorSpec :					register(t0);
Texture2D NormalRough :					register(t1);
Texture2D LightMap :					register(t2);
Texture2D Depth :						register(t3);
Texture2D ShadowMap :					register(t7);
//Texture2DArray ShadowCascades :		register(t6);

Texture2D Random :						register(t2);

Texture3D LightVolumeR :				register(t4);
Texture3D LightVolumeG :				register(t5);
Texture3D LightVolumeB :				register(t6);

Texture3D LightVolumeRight :			register(t4);
Texture3D LightVolumeLeft :				register(t5);
Texture3D LightVolumeTop :				register(t6);
Texture3D LightVolumeBot :				register(t7);
Texture3D LightVolumeFront :			register(t8);
Texture3D LightVolumeBack :				register(t9);

SamplerState Bilinear :					register(s0);
SamplerState Trilinear :				register(s1);
SamplerState BilinearBorder :			register(s2);
SamplerState Point :					register(s3);
SamplerState PointBorder :				register(s4);

#endif
