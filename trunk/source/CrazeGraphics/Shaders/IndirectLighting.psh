#include "globals.incl"
#include "SHMath.incl"

float3 DepthToPos(float depth, float2 uv)
{
	float4 worldPos = mul(float4(float2(uv.x, 1.f - uv.y) * 2.f - 1.f, depth, 1.0f), InvViewProj);
	return worldPos.xyz / worldPos.w;
}

float3 cellFromPos(float3 worldPos)
{
	float3 localPos = (worldPos - LVStart) / (LVCellSize.w * LVCellSize.xyz);
	//localPos.z *= LVCellSize.w;
	return localPos;
}

float4 main(float2 uv : TEXCOORD0) : SV_Target0
{
	float3 color = ColorSpec.Sample(Point, uv).xyz;
	float3 normal = NormalRough.Sample(Point, uv).xyz;
	float depth = Depth.Sample(Point, uv).x;
	float3 pos = DepthToPos(depth, uv);

	float3 cell = cellFromPos(pos);
	cell.y = 1.f - cell.y;

	if (max(cell.x, cell.y) > 1.f || min(cell.x, cell.y) < 0.f || cell.z < 0.f || cell.z > 1.f)
	{
		discard;
	}

	float4 redSH = LightVolumeR.Sample(BilinearBorder, cell);
	float4 greenSH = LightVolumeG.Sample(BilinearBorder, cell);
	float4 blueSH = LightVolumeB.Sample(BilinearBorder, cell);

	float4 sh = EvalSH(-normal);

	float3 light = saturate(float3(dot(redSH, sh), dot(greenSH, sh), dot(blueSH, sh)) * 0.1f);

	return float4(light * color, 1.0f);
}